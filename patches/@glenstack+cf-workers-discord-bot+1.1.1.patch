diff --git a/node_modules/@glenstack/cf-workers-discord-bot/dist/setup.js b/node_modules/@glenstack/cf-workers-discord-bot/dist/setup.js
index d3c8ab0..841c8df 100644
--- a/node_modules/@glenstack/cf-workers-discord-bot/dist/setup.js
+++ b/node_modules/@glenstack/cf-workers-discord-bot/dist/setup.js
@@ -44,9 +44,18 @@ const deleteExistingCommands = ({ applicationID }, authedFetch) => __awaiter(voi
         });
     }));
 });
+function promiseAllSeq(promiseFns) {
+    return promiseFns.reduce((acc, promiseFn) =>
+        acc.then(() => promiseFn()),
+        Promise.resolve()
+    );
+}
+function delay(ms) {
+    return new Promise(r => setTimeout(r, ms));
+}
 const createCommands = ({ applicationID, commands, }, authedFetch) => __awaiter(void 0, void 0, void 0, function* () {
     const url = `https://discord.com/api/v8/applications/${applicationID}/commands`;
-    const promises = commands.map(([command, handler]) => __awaiter(void 0, void 0, void 0, function* () {
+    const promiseFns = commands.map(([command, handler]) => () => __awaiter(void 0, void 0, void 0, function* () {
         const request = new Request(url, {
             method: "POST",
             body: JSON.stringify(command),
@@ -55,15 +64,30 @@ const createCommands = ({ applicationID, commands, }, authedFetch) => __awaiter(
         const error = new Error(`Setting command ${command.name} failed!`);
         try {
             const response = yield authedFetch(request);
-            if (!response.ok)
+            const remaining = Number(response.headers.get('x-ratelimit-remaining'));
+            if (Number.isFinite(remaining) && remaining < 1) {
+                console.log('detected no requests remaining');
+                const resetAfter = Number(response.headers.get('x-ratelimit-reset-after'));
+                if (Number.isFinite(resetAfter)) {
+                    console.log(`waiting ${(resetAfter + 1) * 1000} ms`);
+                    yield delay((resetAfter + 1) * 1000);
+                } else {
+                    console.log('could not detect when reset occurs, waiting 5000 ms');
+                    yield delay(5000);
+                }
+            }
+            if (!response.ok) {
+                console.log({ ...response, headers: Array.from(response.headers.entries()) });
                 throw error;
+            }
             return response;
         }
         catch (e) {
+            console.log({ name: e.name, message: e.message, stack: e.stack, ...e });
             throw error;
         }
     }));
-    return yield Promise.all(promises)
+    return yield promiseAllSeq(promiseFns)
         .then(() => new Response("OK"))
         .catch((e) => new Response(e.message, { status: 502 }));
 });
@@ -79,7 +103,8 @@ exports.setup = ({ applicationID, applicationSecret, commands, }) => {
             yield deleteExistingCommands({ applicationID }, authedFetch);
             return yield createCommands({ applicationID, commands }, authedFetch);
         }
-        catch (_a) {
+        catch (e) {
+            console.log({ name: e.name, message: e.message, stack: e.stack, ...e });
             return new Response("Failed to authenticate with Discord. Are the Application ID and secret set correctly?", { status: 407 });
         }
     });
